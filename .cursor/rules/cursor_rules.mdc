---
description: Guidelines for creating and maintaining Cursor rules to ensure consistency and effectiveness.
globs: .cursor/rules/*.mdc
alwaysApply: true
---

- **Required Rule Structure:**
  ```markdown
  ---
  description: Clear, one-line description of what the rule enforces
  globs: path/to/files/*.ext, other/path/**/*
  alwaysApply: boolean
  ---

  - **Main Points in Bold**
    - Sub-points with details
    - Examples and explanations
  ```

- **File References:**
  - Use `[filename](mdc:path/to/file)` ([filename](mdc:filename)) to reference files
  - Example: [prisma.mdc](mdc:.cursor/rules/prisma.mdc) for rule references
  - Example: [schema.prisma](mdc:prisma/schema.prisma) for code references

- **Code Examples:**
  - Use language-specific code blocks
  ```typescript
  // ✅ DO: Show good examples
  const goodExample = true;
  
  // ❌ DON'T: Show anti-patterns
  const badExample = false;
  ```

- **Rule Content Guidelines:**
  - Start with high-level overview
  - Include specific, actionable requirements
  - Show examples of correct implementation
  - Reference existing code when possible
  - Keep rules DRY by referencing other rules

- **Rule Maintenance:**
  - Update rules when new patterns emerge
  - Add examples from actual codebase
  - Remove outdated patterns
  - Cross-reference related rules

- **Rule Maintenance:**
  - Write the absolute minimum code required
  - ABSOLUTELY DO NOT RUN ANY "npm start" / "npm run" / BASICALLY ANY SERVER/FRONTEND START COMMANDS
  - DO NOT AUTOMATICALLY COMMIT/PUSH TO GIT UNLESS EXPLICITLY STATED SO
  - No sweeping changes
  - No unrelated edits - focus on just the task you're on
  - Make code precise, modular, testable
  - Dont break existing functionality
  - If I need to do anything (e.g. Supabase/AWS config), tell me clearly  "

- **Live Codebase Updates**
  - Every codebase architectural change/ future change/ change so far should be clearly referenced from and documented in [ARCHITECTURE.md](mdc:.devdocs/ARCHITECTURE.md)

- **Best Practices:**
  - Use bullet points for clarity
  - Keep descriptions concise
  - Include both DO and DON'T examples
  - Reference actual code over theoretical examples
  - Use consistent formatting across rules 